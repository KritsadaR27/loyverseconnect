// internal/POManagement/application/services/po_service.go
package services

import (
	"context"
	"errors"
	"fmt"
	"math"
	"time"

	"backend/internal/POManagement/domain/interfaces"
	"backend/internal/POManagement/domain/models"
)

// POService ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á Purchase Order
// internal/POManagement/application/services/po_service.go
type POService struct {
	poRepo             interfaces.PurchaseOrderRepository
	inventoryService   interfaces.InventoryService
	salesService       interfaces.SalesService
	lineService        interfaces.LineService
	calculationService *CalculationService // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ
}

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô NewPOService
func NewPOService(
	poRepo interfaces.PurchaseOrderRepository,
	inventoryService interfaces.InventoryService,
	salesService interfaces.SalesService,
	lineService interfaces.LineService,
	calculationService *CalculationService, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ
) *POService {
	return &POService{
		poRepo:             poRepo,
		inventoryService:   inventoryService,
		salesService:       salesService,
		lineService:        lineService,
		calculationService: calculationService, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤
	}
}

// GetPOData ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ PO
func (s *POService) GetPOData(ctx context.Context, deliveryDate time.Time) (*models.POData, error) {
	// 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Inventory
	stockData, err := s.inventoryService.GetItemStock(ctx)
	if err != nil {
		return nil, fmt.Errorf("error getting stock data: %w", err)
	}

	// 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï (3 ‡∏ß‡∏±‡∏ô)
	futureDates := []time.Time{
		deliveryDate,
		deliveryDate.AddDate(0, 0, 1),
		deliveryDate.AddDate(0, 0, 2),
	}

	// 3. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Sales
	startDate := deliveryDate.AddDate(0, 0, -7) // 7 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
	endDate := futureDates[len(futureDates)-1]
	salesData, err := s.salesService.GetSalesByDay(ctx, startDate, endDate)
	if err != nil {
		return nil, fmt.Errorf("error getting sales data: %w", err)
	}

	// 4. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡πÄ‡∏ú‡∏∑‡πà‡∏≠
	itemIDs := make([]string, len(stockData))
	for i, item := range stockData {
		itemIDs[i] = item.ItemID
	}
	bufferSettings, err := s.poRepo.GetBufferSettings(ctx, itemIDs)
	if err != nil {
		return nil, fmt.Errorf("error getting buffer settings: %w", err)
	}

	// 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PO
	poItems := make([]models.POItem, len(stockData))
	for i, item := range stockData {
		buffer := bufferSettings[item.ItemID]

		// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
		salesByDay := s.calculateSalesByDay(salesData, item.ItemID)

		poItems[i] = models.POItem{
			ItemID:                 item.ItemID,
			ItemName:               item.ItemName,
			CurrentStock:           item.InStock,
			Buffer:                 buffer,
			ProjectedStock:         item.InStock - float64(buffer),
			PreviousSalesByDay:     salesByDay,
			StockByStore:           item.StockByStore,
			Supplier:               item.SupplierName,
			Category:               item.CategoryName,
			OrderQuantity:          0,
			SuggestedOrderQuantity: 0,
		}
	}

	// 6. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏Ç‡∏≠‡∏á
	poItems = s.calculateSuggestedQuantities(ctx, deliveryDate, poItems, salesData)

	return &models.POData{
		DeliveryDate: deliveryDate,
		FutureDates:  futureDates,
		Items:        poItems,
	}, nil
}

// calculateSalesByDay ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô
func (s *POService) calculateSalesByDay(salesData []models.SalesByDay, itemID string) map[string]float64 {
	result := make(map[string]float64)
	for _, sale := range salesData {
		if sale.ItemID == itemID {
			dateKey := sale.Date.Format("2006-01-02")
			result[dateKey] = sale.Quantity
		}
	}
	return result
}

// CalculateSuggestedQuantities ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏Ç‡∏≤‡∏¢
func (s *POService) CalculateSuggestedQuantities(
	ctx context.Context,
	targetDate time.Time,
	items []models.POItem,
	salesData []models.SalesByDay,
) ([]models.POItem, error) {
	return s.calculateSuggestedQuantities(ctx, targetDate, items, salesData), nil
}

// calculateSuggestedQuantities ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏Ç‡∏≤‡∏¢ (helper method)
func (s *POService) calculateSuggestedQuantities(
	ctx context.Context,
	targetDate time.Time,
	items []models.POItem,
	salesData []models.SalesByDay,
) []models.POItem {
	// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏Ç‡∏≤‡∏¢
	deliveryDate := targetDate
	targetDateEnd := targetDate.AddDate(0, 0, 2) // ‡∏û‡∏≠‡∏Ç‡∏≤‡∏¢ 3 ‡∏ß‡∏±‡∏ô
	daysDiff := int(targetDateEnd.Sub(deliveryDate).Hours()/24) + 1

	// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
	avgSalesPerDay := make(map[string]float64)
	for _, sale := range salesData {
		if _, ok := avgSalesPerDay[sale.ItemID]; !ok {
			avgSalesPerDay[sale.ItemID] = 0
		}
		avgSalesPerDay[sale.ItemID] += sale.Quantity
	}

	// ‡∏´‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
	uniqueDates := make(map[string]bool)
	for _, sale := range salesData {
		dateStr := sale.Date.Format("2006-01-02")
		uniqueDates[dateStr] = true
	}
	totalDays := float64(len(uniqueDates))
	if totalDays == 0 {
		totalDays = 1 // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ 0
	}

	// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
	for itemID, totalSales := range avgSalesPerDay {
		avgSalesPerDay[itemID] = totalSales / totalDays
	}

	// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
	for i := range items {
		avgSales := avgSalesPerDay[items[i].ItemID]
		if avgSales == 0 {
			avgSales = 1 // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 1 ‡∏ä‡∏¥‡πâ‡∏ô
		}

		// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏Ç‡∏≤‡∏¢ = ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ * ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô + ‡∏¢‡∏≠‡∏î‡πÄ‡∏ú‡∏∑‡πà‡∏≠
		targetStock := math.Ceil(avgSales*float64(daysDiff)) + float64(items[i].Buffer)

		// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ = ‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ - ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
		suggestedQuantity := targetStock - items[i].CurrentStock
		if suggestedQuantity < 0 {
			suggestedQuantity = 0
		}

		items[i].SuggestedOrderQuantity = int(suggestedQuantity)
		// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏¢‡∏≠‡∏î‡∏™‡∏±‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
		items[i].OrderQuantity = items[i].SuggestedOrderQuantity
	}

	return items
}

// SaveBufferSettings ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏ú‡∏∑‡πà‡∏≠
func (s *POService) SaveBufferSettings(ctx context.Context, settings []models.BufferSettings) error {
	// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
	now := time.Now()
	for i := range settings {
		settings[i].CreatedAt = now
		settings[i].UpdatedAt = now
	}
	return s.poRepo.SaveBufferSettings(ctx, settings)
}

// CreatePO ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
func (s *POService) CreatePO(ctx context.Context, po *models.PurchaseOrder) error {
	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	if po.SupplierID == "" {
		return errors.New("supplier ID is required")
	}
	if po.DeliveryDate.IsZero() {
		return errors.New("delivery date is required")
	}
	if len(po.Items) == 0 {
		return errors.New("at least one item is required")
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç PO
	po.PONumber = fmt.Sprintf("PO-%s-%d", time.Now().Format("20060102"), time.Now().UnixNano()%1000)
	po.Status = models.StatusPending
	po.CreatedAt = time.Now()
	po.UpdatedAt = time.Now()

	// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
	var totalAmount float64
	for i := range po.Items {
		po.Items[i].TotalPrice = po.Items[i].UnitPrice * float64(po.Items[i].Quantity)
		totalAmount += po.Items[i].TotalPrice
	}
	po.TotalAmount = totalAmount

	return s.poRepo.CreatePO(ctx, po)
}

// GetPOByID ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡∏≤‡∏° ID
func (s *POService) GetPOByID(ctx context.Context, id int) (*models.PurchaseOrder, error) {
	return s.poRepo.GetPOByID(ctx, id)
}

// GetAllPOs ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
func (s *POService) GetAllPOs(ctx context.Context, filters map[string]interface{}) ([]*models.PurchaseOrder, error) {
	return s.poRepo.GetAllPOs(ctx, filters)
}

// SendLineNotification ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏•‡∏ô‡πå
func (s *POService) SendLineNotification(ctx context.Context, groupIDs []string, po *models.PurchaseOrder) error {
	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏•‡∏ô‡πå
	message := s.formatPOMessage(po)

	return s.lineService.SendMessage(ctx, groupIDs, message)
}

// formatPOMessage ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏•‡∏ô‡πå
func (s *POService) formatPOMessage(po *models.PurchaseOrder) string {
	message := fmt.Sprintf("üì¶ ‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: %s\n", po.PONumber)
	message += fmt.Sprintf("‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå: %s\n", po.SupplierName)
	message += fmt.Sprintf("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á: %s\n", po.DeliveryDate.Format("02/01/2006"))
	message += fmt.Sprintf("‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°: %.2f ‡∏ö‡∏≤‡∏ó\n\n", po.TotalAmount)

	message += "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:\n"
	for i, item := range po.Items {
		message += fmt.Sprintf("%d. %s - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô %d ‡∏ä‡∏¥‡πâ‡∏ô\n", i+1, item.ItemName, item.Quantity)
	}

	return message
}

// GetSalesByDay ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
func (s *POService) GetSalesByDay(ctx context.Context, startDate, endDate time.Time) ([]models.SalesByDay, error) {
	return s.salesService.GetSalesByDay(ctx, startDate, endDate)
}

// internal/POManagement/application/services/po_service.go

// GetBufferSettingsBatch ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• buffer settings ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö item IDs ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å
func (s *POService) GetBufferSettingsBatch(ctx context.Context, itemIDs []string) (map[string]int, error) {
	return s.poRepo.GetBufferSettingsBatch(ctx, itemIDs)
}
