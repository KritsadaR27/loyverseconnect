services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    env_file:
      - .env.local
    ports:
      - "3000:3000"
    depends_on:
      - loyverse-connect
    
    

  loyverse-connect:
    build:
      context: .
      dockerfile: backend/external/loyverse/Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - LOYVERSE_API_TOKEN=${LOYVERSE_API_TOKEN}
    env_file:
      - .env.local
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy

  inventory-management:
    build:
      context: . 
      dockerfile: backend/internal/InventoryManagement/Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials.json
      - GOOGLE_SHEETS_SPREADSHEET_ID=${GOOGLE_SHEETS_SPREADSHEET_ID}
    env_file:
      - .env.local
    ports:
      - "8082:8082"
    volumes:
      - ./backend/internal/InventoryManagement/credentials.json:/app/credentials.json
    depends_on:
      db:
        condition: service_healthy
    container_name: inventory-management
    
    

  supplier-management:
    build:
      context: .
      dockerfile: backend/internal/SupplierManagement/Dockerfile
    environment:
      - PORT=8083
      - DATABASE_URL=${DATABASE_URL}
    env_file:
      - .env.local
    ports:
      - "8083:8083"
    depends_on:
      db:
        condition: service_healthy
    container_name: supplier-management
    

  sale-management:
    build:
      context: .
      dockerfile: backend/internal/SaleManagement/Dockerfile
    environment:
      - PORT=8084
      - DATABASE_URL=${DATABASE_URL}
    env_file:
      - .env.local
    ports:
      - "8084:8084"
    depends_on:
      db:
        condition: service_healthy
  # purchase-order-management:
  #   build:
  #     context: .
  #     dockerfile: backend/internal/POManagement/Dockerfile
  #   environment:
  #     - PORT=8085
  #     - DATABASE_URL=${DATABASE_URL}
  #   env_file:
  #     - .env.local
  #   ports:
  #     - "8085:8085"
  #   depends_on:
  #     db:
  #       condition: service_healthy
  # # docker-compose.yml (เพิ่มเติม)
  # airtable-connect:
  #   build:
  #     context: .
  #     dockerfile: backend/external/airtable-connect/Dockerfile
  #   container_name: airtable-connect
  #   environment:
  #     - PORT=8085
  #     - AIRTABLE_ACCESS_TOKEN=${AIRTABLE_ACCESS_TOKEN}
  #     - AIRTABLE_BASE_ID=${AIRTABLE_BASE_ID}
  #     - LINE_NOTIFY_TOKEN_DELIVERY=${LINE_NOTIFY_TOKEN_DELIVERY}
  #     - LINE_NOTIFY_TOKEN_ORDERS=${LINE_NOTIFY_TOKEN_ORDERS}
  #   ports:
  #     - "8085:8085"
  #   depends_on:
  #     - db

  line-connect:
    build:
      context: .
      dockerfile: backend/external/LineConnect/Dockerfile
    ports:
      - "8085:8085"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - LINE_CHANNEL_SECRET=${LINE_CHANNEL_SECRET}
      - LINE_CHANNEL_TOKEN=${LINE_CHANNEL_TOKEN}
      - PORT=8085
    depends_on:
      - db
    restart: unless-stopped

  airtable-connect:
    build:
      context: .
      dockerfile: backend/external/AirtableConnect/Dockerfile
    ports:
      - "8086:8086"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - AIRTABLE_ACCESS_TOKEN=${AIRTABLE_ACCESS_TOKEN}
      - AIRTABLE_BASE_ID=${AIRTABLE_BASE_ID}
      - PORT=8086
    depends_on:
      - db
    restart: unless-stopped

    
  db:
    image: postgres:13
    environment:
      POSTGRES_DB: loyverse_cache
      POSTGRES_USER: loyuser
      POSTGRES_PASSWORD: password
    env_file:
      - .env.local
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U loyuser -d loyverse_cache"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data: {}

networks:
  default:
    driver: bridge